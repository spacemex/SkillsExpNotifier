plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "skillexpnotifier.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.

    shaded
    implementation.extendsFrom(shaded)
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"
    modImplementation("net.puffish:skillsmod:0.16.2+1.20:forge")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    //shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    // Add dependencies to be shaded - changed from implementation to shaded
    shaded("org.yaml:snakeyaml:2.4")
    shaded('com.github.spacemex:SimpleConfigApi:manual-5')

    include("org.yaml:snakeyaml:2.4")
    include('com.github.spacemex:SimpleConfigApi:manual-5')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shaded]
    archiveClassifier = 'dev-shadow'

    from(project(":common").sourceSets.main.output)
    from(sourceSets.main.output)

    // Relocate packages to avoid conflicts
    relocate 'org.yaml.snakeyaml', 'com.github.spacemex.skillexpnotifier.shaded.snakeyaml'
    relocate 'com.github.spacemex.yml', 'com.github.spacemex.skillexpnotifier.shaded.yml'
    relocate 'com.github.spacemex.simpleconfigapi', 'com.github.spacemex.skillexpnotifier.shaded.simpleconfigapi'

    // Exclude unnecessary files
    exclude "META-INF/LICENSE"
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE"
    exclude "META-INF/NOTICE.txt"
    exclude "module-info.class"

    // Merge service files correctly
    mergeServiceFiles()
}

remapJar {
    input.set shadowJar.archiveFile
}
